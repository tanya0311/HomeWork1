{"version":3,"sources":["components/Message/Message.module.css","components/TodoList/TodoList1.module.css","common/button/Button.module.css","components/Message/Message.tsx","common/button/Button.tsx","common/input/InputItem.tsx","components/TodoList/TodoList1.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","classes","MessageImg","src","alt","MessageText","userMessage","userName","name","userText","text","time","Button","title","deletButton","button","onClick","callbackFun","InputItem","useState","id","v1","names","setNames","newNames","setNewNames","error","setError","HelloNames","trim","alert","addNames","writeName","console","log","length","type","value","onChange","e","currentTarget","onKeyPress","charCode","Todolist","TodoList","tasks","map","t","key","isDone","isdone","checked","ChangTaskStatus","p","removeTask","btnTL","changeFilter","App","setTasks","filter","setFilter","tasksForTodoList","filteredTasks","newFilterValues","taskId","task","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e7fd590a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__L9LXR\",\"MessageImg\":\"Message_MessageImg__217vd\",\"MessageText\":\"Message_MessageText__2Sizf\",\"userMessage\":\"Message_userMessage__1zin8\",\"userName\":\"Message_userName__3MjTx\",\"userText\":\"Message_userText__1Vrwv\",\"time\":\"Message_time__2LRPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList1_TodoList__1Ccbf\",\"text\":\"TodoList1_text__DvQLb\",\"delete\":\"TodoList1_delete__Aiw_j\",\"btnTL\":\"TodoList1_btnTL__20tof\",\"activeFilter\":\"TodoList1_activeFilter__3eIHh\",\"isdone\":\"TodoList1_isdone__2KROL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnTL\":\"Button_btnTL__18_RJ\",\"button\":\"Button_button__2Aqzd\",\"deletButton\":\"Button_deletButton__z2b3l\"};","import React from 'react';\nimport classes from './Message.module.css';\n\n\ntype MessageType = {\n    name: string,\n    text: string,\n    time: string\n}\n\nconst Message = (props:MessageType) => {\n    return (\n        <div className={classes.Message}>\n            <div className={classes.MessageImg}>\n                <img\n                    src=\"https://mmo-dev.info/media/%D0%9C%D0%BE%D1%8F-%D0%B0%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B0.4077/full\"\n                    alt=\"avatar\"/>\n            </div>\n            <div className={classes.MessageText}>\n                <div className={classes.userMessage}>\n                    <h1 className={classes.userName}>{props.name}</h1>\n                    <p className={classes.userText}>{props.text}</p>\n                </div>\n                <div className={classes.time}>{props.time}</div>\n            </div>\n        </div>\n    )\n}\nexport default Message;","import React from 'react';\nimport classes from './Button.module.css';\n\n\ntype ButtonType = {\n    title: string\n    callbackFun: () => void\n}\n\n\nexport function Button(props: ButtonType) {\n    return <button\n        className={props.title === 'delete' ? classes.deletButton : classes.button}\n        onClick={props.callbackFun}>{props.title}</button>\n}\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {v1} from \"uuid\";\nimport {Button} from \"../button/Button\";\nimport classes from \"./Input.module.css\";\n\ntype InputItemsProps = {\n    HelloNames: (newNames: string) => void\n    addNames: (newNames: string) => void\n    // names:string\n}\n\nexport function InputItem(props: InputItemsProps) {\n    let [names, setNames] = useState([{id: v1(), name: ' Vasaya'}]);\n    let [newNames, setNewNames] = useState(' ');\n    let [error, setError] = useState<string | null>(null);\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewNames(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        // setError(null);\n        if (e.charCode === 13) {\n            HelloNames(newNames);\n            setNewNames(' ')\n        }\n    }\n\n    function HelloNames(newNames: string) {\n        //if (newNames.length >= 2) или\n        if (newNames.trim() !== '') {\n            alert('Hello' + newNames);\n            addNames(newNames);\n        } else {\n            setError('Field is required')\n        }\n        addNames(' ')\n    }\n\n    function addNames(newNames: string) {\n        let writeName = {id: v1(), name: newNames};\n        setNames([writeName, ...names]);\n        console.log(newNames.length + names.length);\n    }\n\n    const onButtonNames = () => {\n        HelloNames(newNames);\n        setNewNames(' ');\n    }\n    return (\n        <div>\n        <input type=\"text\"\n               value={newNames}\n               onChange={onChangeHandler}\n               onKeyPress={onKeyPressHandler}\n               className={error ? 'error' : ' '}\n        />\n\n    {/*<Button title={'+'} callbackFun={()=>{HelloNames}}/>*/}\n    {/*{error && <div className={classes.errorMessage}> {error}</div>}*/}\n</div>\n\n\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport classes from './TodoList1.module.css';\nimport {v1} from \"uuid\";\n// import {Input} from \"../../common/input/Input\";\nimport {Button} from \"../../common/button/Button\";\nimport {InputItem} from \"../../common/input/InputItem\";\n\n\ntype TaskType = {\n    id: string\n    title: string\n    p: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string) => void\n    changeFilter: (newFilterValues: FilterValuesType) => void\n    ChangTaskStatus: (taskId: string, isDone: boolean) => void\n    filter: FilterValuesType\n    HelloNames: (newNames: string) => void\n    addNames: (newNames: string) => void\n}\n\nexport type FilterValuesType = 'all' | 'important' | 'completed'\n\n\nexport function Todolist(props: PropsType) {\n    //task 3\n    let [names, setNames] = useState([{id: v1(), name: ' Vasaya'}]);\n    let [newNames, setNewNames] = useState(' ');\n    //\n    // let [error, setError] = useState<string | null>(null);\n    //\n    //\n    // function HelloNames(setNewNames: string) {\n    //     //if (newNames.length >= 2) или\n    //     if (newNames.trim() !== '') {\n    //         alert('Hello' + newNames);\n    //         addNames(newNames);\n    //     } else {\n    //         setError('Field is required')\n    //     }\n    //     addNames(' ')\n    // }\n    //\n    // function addNames(newNames: string) {\n    //     let writeName = {id: v1(), name: newNames};\n    //     setNames([writeName, ...names]);\n    //     console.log(newNames.length + names.length);\n    // }\n    //\n    // const onButtonNames = () => {\n    //     HelloNames(newNames);\n    //     setNewNames(' ');\n    // }\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    //     setNewNames(e.currentTarget.value)\n    // }\n    //\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    //     // setError(null);\n    //     if (e.charCode === 13) {\n    //         HelloNames(newNames);\n    //         setNewNames(' ')\n    //     }\n    // }\n\n\n    return <div className={classes.TodoList}>\n        <br/>\n        <InputItem addNames={props.addNames} HelloNames={props.HelloNames}/>\n\n\n\n\n        {/*<Input newNames={newNames} setNewNames={setNewNames} HelloNames={HelloNames}/>*/}\n\n        <p>The number of objects in the array: {names.length}</p>\n        <br/>\n\n        <h1>{props.title}</h1>\n        <ol>\n            {\n                props.tasks.map((t) => {\n                    // const onRemoveHandler = () => {\n                    //     props.removeTask(t.id)\n                    // };\n                    const onChang1Handler = (e: ChangeEvent<HTMLInputElement>) => {\n                        props.ChangTaskStatus(t.id, e.currentTarget.checked)\n                    }\n                    return <li key={t.id} className={t.isDone ? classes.isdone : ' '}>\n                        <input type=\"checkbox\" checked={t.isDone} onChange={onChang1Handler}/>\n                        <p className={classes.text}>{t.title} <span>{t.p}</span></p>\n                        {/*<button className={classes.delete}*/}\n                        {/*        onClick={onRemoveHandler}> delete*/}\n                        {/*</button>*/}\n                        <Button title={'delete'}\n                                callbackFun={() => {\n                                    props.removeTask(t.id)\n                                }}/>\n                    </li>\n                })\n            }\n        </ol>\n        <div className={classes.btnTL}>\n\n            <Button title={'all'}\n                    callbackFun={() => {\n                        props.changeFilter('all')\n                    }}/>\n            <Button title={'important'}\n                    callbackFun={() => {\n                        props.changeFilter('important')\n                    }}/>\n            <Button title={'completed'}\n                    callbackFun={() => {\n                        props.changeFilter('completed')\n                    }}/>\n\n\n\n        </div>\n    </div>\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Message from \"./components/Message/Message\";\nimport {Todolist, FilterValuesType} from './components/TodoList/TodoList1';\nimport {v1} from \"uuid\";\n\n\nfunction App() {\n\n\n    let [tasks, setTasks] = useState([\n        {id: v1(), title: \"homework\", p: \"hight\", isDone: true},\n        {id: v1(), title: \"reading\", p: \"low\", isDone: false},\n        {id: v1(), title: \"cleaning\", p: \"low\", isDone: false},\n        {id: v1(), title: \"video\", p: \"middle\", isDone: true},\n    ]);\n\n    let [filter, setFilter] = useState<FilterValuesType>('all');\n\n\n    function changeFilter(newFilterValues: FilterValuesType) {\n        setFilter(newFilterValues);\n    };\n\n\n    let tasksForTodoList = tasks;\n    if (filter === 'important') {\n        tasksForTodoList = tasks.filter(t => t.p === \"hight\")\n    }\n    if (filter === 'completed') {\n        tasksForTodoList = tasks.filter(t => t.isDone === true)\n\n    }\n\n    function removeTask(id: string) {\n        let filteredTasks = tasks.filter(t => t.id !== id);\n        setTasks(filteredTasks);\n    }\n\n    function ChangStatus(taskId: string, isDone: boolean) {\n        let task = tasks.find(t => t.id === taskId);\n        if (task) {\n            task.isDone = isDone;\n        }\n        setTasks([...tasks]);\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Todolist\n                title=\"TodoList\"\n                tasks={tasksForTodoList}\n                removeTask={removeTask}\n                changeFilter={changeFilter}\n                ChangTaskStatus={ChangStatus}\n                filter={filter}\n            />\n\n            <Message name=\"Tatsiana\" text=\"100% где-то могла накосячить, но буду стараться)\" time=\"20:00\"/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}